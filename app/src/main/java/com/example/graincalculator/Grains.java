package com.example.graincalculator;

public class Grains {
    private enum SquareFootGroups {
        _0To254 (0, 254),
        _255To461 (255, 461),
        _462To767 (462, 767),
        _768To1384 (768, 1384),
        _1385To2289 (1385, 2289),
        _2290ToInfinity (2290, Long.MAX_VALUE);

        private final long minSquareFootage;
        private final long maxSquareFootage;

        SquareFootGroups(long minSquareFootage, long maxSquareFootage) {
            this.minSquareFootage = minSquareFootage;
            this.maxSquareFootage = maxSquareFootage;
        }

        public static SquareFootGroups getEnum(long squareFootage) {
            if (squareFootage < 0)
                squareFootage = 0;
            for(SquareFootGroups v : values())
                if(squareFootage >= v.minSquareFootage &&
                        squareFootage <= v.maxSquareFootage)
                    return v;
            throw new IllegalArgumentException(String.valueOf(squareFootage) + " is not in range of any area groups.");
        }

    }

    public enum GrainTypes {
        Corn       (15.0, 0.42, 56, 30, 64, cornPackFactors),
        Soybeans   (13.0, 0.47, 60, 40, 65, soybeanPackFactors),
        Wheat      (13.5, 0.47, 60, 35, 64, wheatPackFactors),
        Oats       (14.0, 0.53, 32, 20, 50, oatsPackFactors),
        Barley     (14.5, 0.53, 48, 25, 56, barleyPackFactors);
        //Sunflowers (13.5, 0.51, 30, 35, 64);

        private final double baseMoisture;
        private final double angleOfRepose;
        private final double testWeight;
        private final double minTestWeight;
        private final double maxTestWeight;
        private final double[][] packFactors;
        GrainTypes(double baseMoisture, double angleOfRepose, double testWeight,
                   double minTestWeight, double maxTestWeight, double[][] packFactors) {
            this.baseMoisture = baseMoisture;
            this.angleOfRepose = angleOfRepose;
            this.testWeight = testWeight;
            this.minTestWeight = minTestWeight;
            this.maxTestWeight = maxTestWeight;
            this.packFactors = packFactors;
        }
        public Double BaseMoisture() { return baseMoisture; }
        public double AngleOfRepose() { return angleOfRepose; }
        public Double BaseTestWeight() { return testWeight; }
        public double MinTestWeight() { return minTestWeight; }
        public double MaxTestWeight() { return maxTestWeight; }


        public double PackFactor(long area, Double testWeight) {

            // round test weight to the nearest half or whole pound
            testWeight = (Math.round((testWeight*10)/5.0) * 5) / 10.0;

            // to determine the pack factor from the matrices, we need a
            // test weight that is listed on the matrices.
            double adjustedTestWeight = testWeight;
            if (adjustedTestWeight < minTestWeight)
                adjustedTestWeight = minTestWeight;
            if (adjustedTestWeight > maxTestWeight)
                adjustedTestWeight = maxTestWeight;

            // variables which indicate which row and column to use from the pack factor matrix
            int testWeightRow = (int) ((adjustedTestWeight - minTestWeight) / .5);
            SquareFootGroups squareFootageColumn = SquareFootGroups.getEnum(area);

            // retrieve pack factor from crop specific matrix
            double packFactor = packFactors[testWeightRow][squareFootageColumn.ordinal()];

            // if the test weight is greater than the max test weight in the matrix, then
            // we calculate the actual pack factor given the highest pack factor available.
            if (testWeight > adjustedTestWeight)
                packFactor = Utils.Round(testWeight * packFactor / adjustedTestWeight, 3);

            return packFactor;
        }

        public double MoistureFactor(double moisture) {
            double moistureFactor = 1;

            switch (this) {
                case Corn:
                    if (moisture >= 30)
                        moistureFactor = .82 - ((moisture - 30) * 10 * .002);
                    else if (moisture >= baseMoisture)
                        moistureFactor = 1 - ((moisture - baseMoisture) * 10 * .0012);
                    break;
                default:
                    // For every .1 percent of moisture, subtract .0012 from 1 to
                    // determine the moisture factor.
                    moistureFactor = 1 - ((moisture - baseMoisture) * 10 * .0012);
                    break;
            }

            return moistureFactor;
        }

    }

    // These values pulled from the Nov 2010 version of the FCIC 25080 document
    private final static double[][] cornPackFactors = {
            { 0.587, 0.594, 0.603, 0.61, 0.61, 0.61 },
            { 0.596, 0.603, 0.612, 0.619, 0.619, 0.619 },
            { 0.605, 0.612, 0.622, 0.628, 0.628, 0.628 },
            { 0.614, 0.621, 0.631, 0.638, 0.638, 0.638 },
            { 0.623, 0.63, 0.64, 0.647, 0.647, 0.647 },
            { 0.632, 0.639, 0.649, 0.656, 0.656, 0.656 },
            { 0.641, 0.648, 0.658, 0.665, 0.665, 0.665 },
            { 0.649, 0.657, 0.667, 0.674, 0.674, 0.674 },
            { 0.658, 0.665, 0.676, 0.684, 0.684, 0.684 },
            { 0.667, 0.674, 0.685, 0.693, 0.693, 0.693 },
            { 0.676, 0.683, 0.694, 0.702, 0.702, 0.702 },
            { 0.684, 0.692, 0.703, 0.711, 0.711, 0.711 },
            { 0.693, 0.701, 0.712, 0.72, 0.72, 0.72 },
            { 0.702, 0.709, 0.721, 0.729, 0.729, 0.729 },
            { 0.71, 0.718, 0.73, 0.738, 0.738, 0.738 },
            { 0.719, 0.727, 0.739, 0.747, 0.747, 0.747 },
            { 0.727, 0.736, 0.748, 0.756, 0.756, 0.756 },
            { 0.736, 0.744, 0.757, 0.765, 0.765, 0.765 },
            { 0.744, 0.753, 0.765, 0.774, 0.774, 0.774 },
            { 0.753, 0.761, 0.774, 0.783, 0.783, 0.783 },
            { 0.761, 0.77, 0.783, 0.791, 0.791, 0.791 },
            { 0.77, 0.779, 0.792, 0.8, 0.8, 0.8 },
            { 0.778, 0.787, 0.8, 0.809, 0.809, 0.809 },
            { 0.787, 0.796, 0.809, 0.818, 0.818, 0.818 },
            { 0.795, 0.804, 0.818, 0.841, 0.853, 0.871 },
            { 0.803, 0.812, 0.826, 0.849, 0.861, 0.879 },
            { 0.812, 0.821, 0.835, 0.857, 0.869, 0.887 },
            { 0.82, 0.829, 0.843, 0.865, 0.877, 0.895 },
            { 0.828, 0.838, 0.852, 0.873, 0.885, 0.903 },
            { 0.836, 0.846, 0.86, 0.881, 0.893, 0.911 },
            { 0.845, 0.854, 0.869, 0.889, 0.901, 0.919 },
            { 0.853, 0.862, 0.877, 0.897, 0.909, 0.927 },
            { 0.861, 0.871, 0.886, 0.905, 0.917, 0.935 },
            { 0.869, 0.879, 0.894, 0.913, 0.925, 0.943 },
            { 0.877, 0.887, 0.902, 0.921, 0.933, 0.951 },
            { 0.885, 0.895, 0.911, 0.929, 0.941, 0.959 },
            { 0.893, 0.903, 0.919, 0.937, 0.949, 0.967 },
            { 0.901, 0.912, 0.927, 0.945, 0.957, 0.975 },
            { 0.909, 0.92, 0.935, 0.953, 0.965, 0.983 },
            { 0.917, 0.928, 0.944, 0.961, 0.973, 0.991 },
            { 0.925, 0.936, 0.952, 0.969, 0.981, 0.999 },
            { 0.933, 0.944, 0.96, 0.978, 0.99, 1.009 },
            { 0.941, 0.952, 0.968, 0.986, 0.998, 1.017 },
            { 0.949, 0.96, 0.976, 0.994, 1.006, 1.025 },
            { 0.956, 0.968, 0.984, 1.003, 1.015, 1.034 },
            { 0.964, 0.975, 0.992, 1.011, 1.024, 1.043 },
            { 0.972, 0.983, 1, 1.019, 1.032, 1.051 },
            { 0.98, 0.991, 1.008, 1.027, 1.04, 1.059 },
            { 0.987, 0.999, 1.016, 1.036, 1.049, 1.069 },
            { 0.995, 1.007, 1.024, 1.044, 1.057, 1.077 },
            { 1.003, 1.015, 1.032, 1.052, 1.065, 1.085 },
            { 1.01, 1.022, 1.04, 1.06, 1.073, 1.094 },
            { 1.018, 1.03, 1.048, 1.068, 1.081, 1.102 },
            { 1.026, 1.038, 1.056, 1.076, 1.089, 1.11 },
            { 1.033, 1.045, 1.064, 1.084, 1.097, 1.118 },
            { 1.041, 1.053, 1.071, 1.092, 1.105, 1.126 },
            { 1.048, 1.061, 1.079, 1.1, 1.113, 1.134 },
            { 1.056, 1.068, 1.087, 1.108, 1.122, 1.143 },
            { 1.063, 1.076, 1.095, 1.116, 1.13, 1.151 },
            { 1.07, 1.083, 1.102, 1.123, 1.138, 1.16 },
            { 1.078, 1.091, 1.11, 1.131, 1.146, 1.168 },
            { 1.085, 1.098, 1.118, 1.139, 1.153, 1.175 },
            { 1.093, 1.106, 1.125, 1.147, 1.161, 1.183 },
            { 1.1, 1.113, 1.133, 1.155, 1.169, 1.191 },
            { 1.107, 1.12, 1.14, 1.163, 1.177, 1.199 },
            { 1.114, 1.127, 1.147, 1.171, 1.185, 1.207 },
            { 1.121, 1.134, 1.154, 1.179, 1.193, 1.215 },
            { 1.128, 1.141, 1.161, 1.187, 1.201, 1.223 },
            { 1.135, 1.148, 1.168, 1.195, 1.209, 1.231 }
    };

    // These values pulled from the Dec 2009 version of the FCIC 25440 document
    private final static double[][] soybeanPackFactors = {
            { 0.719, 0.727, 0.739, 0.745, 0.757, 0.774 },
            { 0.727, 0.735, 0.747, 0.753, 0.765, 0.782 },
            { 0.735, 0.743, 0.755, 0.761, 0.773, 0.79 },
            { 0.743, 0.751, 0.763, 0.769, 0.781, 0.798 },
            { 0.75, 0.759, 0.771, 0.777, 0.789, 0.806 },
            { 0.758, 0.767, 0.78, 0.785, 0.797, 0.814 },
            { 0.766, 0.775, 0.788, 0.793, 0.805, 0.822 },
            { 0.774, 0.783, 0.796, 0.801, 0.813, 0.83 },
            { 0.782, 0.791, 0.804, 0.809, 0.821, 0.838 },
            { 0.79, 0.798, 0.812, 0.817, 0.829, 0.846 },
            { 0.797, 0.806, 0.82, 0.825, 0.837, 0.854 },
            { 0.805, 0.814, 0.828, 0.833, 0.845, 0.862 },
            { 0.813, 0.822, 0.836, 0.841, 0.853, 0.87 },
            { 0.82, 0.83, 0.844, 0.849, 0.861, 0.878 },
            { 0.828, 0.837, 0.851, 0.857, 0.869, 0.886 },
            { 0.836, 0.845, 0.859, 0.865, 0.877, 0.894 },
            { 0.843, 0.853, 0.867, 0.873, 0.885, 0.902 },
            { 0.851, 0.86, 0.875, 0.881, 0.893, 0.91 },
            { 0.858, 0.868, 0.883, 0.889, 0.901, 0.918 },
            { 0.866, 0.876, 0.891, 0.897, 0.909, 0.926 },
            { 0.873, 0.883, 0.898, 0.905, 0.917, 0.934 },
            { 0.881, 0.891, 0.906, 0.913, 0.925, 0.942 },
            { 0.888, 0.898, 0.914, 0.921, 0.933, 0.951 },
            { 0.896, 0.906, 0.921, 0.928, 0.94, 0.957 },
            { 0.903, 0.913, 0.929, 0.936, 0.948, 0.966 },
            { 0.91, 0.921, 0.937, 0.943, 0.955, 0.973 },
            { 0.918, 0.928, 0.944, 0.951, 0.963, 0.981 },
            { 0.925, 0.936, 0.952, 0.959, 0.971, 0.99 },
            { 0.932, 0.943, 0.959, 0.966, 0.978, 0.997 },
            { 0.94, 0.951, 0.967, 0.974, 0.986, 1.005 },
            { 0.947, 0.958, 0.974, 0.982, 0.994, 1.013 },
            { 0.954, 0.965, 0.982, 0.989, 1.001, 1.02 },
            { 0.961, 0.973, 0.989, 0.997, 1.01, 1.029 },
            { 0.969, 0.98, 0.997, 1.004, 1.016, 1.035 },
            { 0.976, 0.987, 1.004, 1.012, 1.025, 1.044 },
            { 0.983, 0.994, 1.012, 1.019, 1.032, 1.051 },
            { 0.99, 1.001, 1.019, 1.027, 1.04, 1.06 },
            { 0.997, 1.009, 1.026, 1.034, 1.047, 1.067 },
            { 1.004, 1.016, 1.033, 1.041, 1.054, 1.074 },
            { 1.011, 1.023, 1.041, 1.049, 1.062, 1.083 },
            { 1.018, 1.03, 1.048, 1.056, 1.069, 1.09 },
            { 1.025, 1.037, 1.055, 1.063, 1.076, 1.097 },
            { 1.032, 1.044, 1.062, 1.071, 1.084, 1.105 },
            { 1.039, 1.051, 1.07, 1.078, 1.091, 1.112 },
            { 1.046, 1.058, 1.077, 1.085, 1.098, 1.119 },
            { 1.053, 1.065, 1.084, 1.092, 1.105, 1.126 },
            { 1.059, 1.072, 1.091, 1.099, 1.112, 1.133 },
            { 1.066, 1.079, 1.098, 1.106, 1.119, 1.14 },
            { 1.073, 1.086, 1.105, 1.113, 1.126, 1.147 },
            { 1.08, 1.093, 1.112, 1.12, 1.133, 1.154 },
            { 1.087, 1.1, 1.119, 1.127, 1.14, 1.161 }
    };

    // These values pulled from the July 2010 version of the FCIC 25430 document
    private final static double[][] wheatPackFactors = {
            { 0.648, 0.656, 0.665, 0.674, 0.674, 0.674 },
            { 0.656, 0.665, 0.674, 0.682, 0.682, 0.682 },
            { 0.664, 0.673, 0.682, 0.691, 0.691, 0.691 },
            { 0.673, 0.682, 0.691, 0.7, 0.7, 0.7 },
            { 0.681, 0.69, 0.699, 0.709, 0.709, 0.709 },
            { 0.689, 0.698, 0.708, 0.717, 0.717, 0.717 },
            { 0.697, 0.707, 0.716, 0.726, 0.726, 0.726 },
            { 0.706, 0.715, 0.725, 0.734, 0.734, 0.734 },
            { 0.714, 0.723, 0.733, 0.743, 0.743, 0.743 },
            { 0.722, 0.732, 0.742, 0.751, 0.751, 0.751 },
            { 0.73, 0.74, 0.75, 0.773, 0.79, 0.812 },
            { 0.738, 0.748, 0.758, 0.782, 0.799, 0.821 },
            { 0.746, 0.756, 0.767, 0.791, 0.808, 0.83 },
            { 0.754, 0.765, 0.775, 0.8, 0.817, 0.839 },
            { 0.762, 0.773, 0.783, 0.809, 0.826, 0.848 },
            { 0.77, 0.781, 0.792, 0.818, 0.835, 0.857 },
            { 0.778, 0.789, 0.8, 0.826, 0.843, 0.865 },
            { 0.786, 0.797, 0.808, 0.834, 0.851, 0.873 },
            { 0.794, 0.805, 0.816, 0.842, 0.859, 0.881 },
            { 0.802, 0.813, 0.824, 0.85, 0.867, 0.889 },
            { 0.81, 0.821, 0.833, 0.858, 0.875, 0.897 },
            { 0.818, 0.829, 0.841, 0.866, 0.883, 0.905 },
            { 0.826, 0.837, 0.849, 0.874, 0.891, 0.913 },
            { 0.834, 0.845, 0.857, 0.882, 0.899, 0.921 },
            { 0.841, 0.853, 0.865, 0.89, 0.907, 0.929 },
            { 0.849, 0.861, 0.873, 0.898, 0.915, 0.937 },
            { 0.857, 0.869, 0.881, 0.906, 0.923, 0.945 },
            { 0.865, 0.877, 0.889, 0.914, 0.931, 0.953 },
            { 0.872, 0.884, 0.897, 0.922, 0.939, 0.961 },
            { 0.88, 0.892, 0.905, 0.93, 0.947, 0.969 },
            { 0.888, 0.9, 0.913, 0.938, 0.955, 0.977 },
            { 0.895, 0.908, 0.92, 0.947, 0.963, 0.985 },
            { 0.903, 0.915, 0.928, 0.954, 0.971, 0.994 },
            { 0.91, 0.923, 0.936, 0.963, 0.979, 1.002 },
            { 0.918, 0.931, 0.944, 0.97, 0.987, 1.01 },
            { 0.925, 0.938, 0.952, 0.978, 0.995, 1.018 },
            { 0.933, 0.946, 0.959, 0.986, 1.003, 1.026 },
            { 0.94, 0.954, 0.967, 0.994, 1.011, 1.034 },
            { 0.948, 0.961, 0.975, 1.002, 1.02, 1.043 },
            { 0.955, 0.969, 0.982, 1.01, 1.028, 1.051 },
            { 0.963, 0.976, 0.99, 1.018, 1.036, 1.06 },
            { 0.97, 0.984, 0.998, 1.026, 1.044, 1.068 },
            { 0.977, 0.991, 1.005, 1.034, 1.052, 1.077 },
            { 0.985, 0.999, 1.013, 1.042, 1.06, 1.085 },
            { 0.992, 1.006, 1.02, 1.05, 1.068, 1.093 },
            { 0.999, 1.013, 1.028, 1.057, 1.075, 1.1 },
            { 1.006, 1.021, 1.035, 1.065, 1.083, 1.108 },
            { 1.014, 1.028, 1.043, 1.073, 1.092, 1.117 },
            { 1.021, 1.035, 1.05, 1.081, 1.1, 1.126 },
            { 1.028, 1.043, 1.058, 1.088, 1.107, 1.132 },
            { 1.035, 1.05, 1.065, 1.096, 1.115, 1.141 },
            { 1.042, 1.057, 1.072, 1.104, 1.123, 1.15 },
            { 1.049, 1.064, 1.08, 1.111, 1.13, 1.157 },
            { 1.056, 1.072, 1.087, 1.119, 1.138, 1.165 },
            { 1.063, 1.079, 1.094, 1.126, 1.145, 1.172 },
            { 1.07, 1.086, 1.101, 1.134, 1.153, 1.18 },
            { 1.077, 1.093, 1.108, 1.141, 1.162, 1.189 },
            { 1.084, 1.1, 1.115, 1.148, 1.169, 1.196 },
            { 1.091, 1.107, 1.122, 1.156, 1.177, 1.205 }
    };

    // These values pulled from the July 2010 version of the FCIC 25430 document
    private final static double[][] barleyPackFactors = {
            { 0.594, 0.615, 0.625, 0.646, 0.646, 0.646 },
            { 0.604, 0.626, 0.636, 0.657, 0.657, 0.657 },
            { 0.615, 0.636, 0.647, 0.669, 0.669, 0.669 },
            { 0.625, 0.647, 0.658, 0.68, 0.68, 0.68 },
            { 0.636, 0.658, 0.669, 0.692, 0.692, 0.692 },
            { 0.646, 0.669, 0.68, 0.703, 0.703, 0.703 },
            { 0.656, 0.68, 0.691, 0.715, 0.715, 0.715 },
            { 0.666, 0.69, 0.702, 0.726, 0.726, 0.726 },
            { 0.677, 0.701, 0.713, 0.737, 0.737, 0.737 },
            { 0.687, 0.711, 0.724, 0.748, 0.748, 0.748 },
            { 0.697, 0.722, 0.734, 0.797, 0.825, 0.842 },
            { 0.707, 0.732, 0.745, 0.807, 0.835, 0.853 },
            { 0.717, 0.743, 0.756, 0.817, 0.845, 0.864 },
            { 0.727, 0.753, 0.766, 0.827, 0.855, 0.875 },
            { 0.737, 0.763, 0.777, 0.837, 0.865, 0.886 },
            { 0.746, 0.774, 0.787, 0.847, 0.875, 0.897 },
            { 0.756, 0.784, 0.798, 0.857, 0.885, 0.908 },
            { 0.766, 0.794, 0.804, 0.867, 0.895, 0.919 },
            { 0.776, 0.804, 0.818, 0.877, 0.905, 0.93 },
            { 0.785, 0.814, 0.828, 0.887, 0.915, 0.941 },
            { 0.795, 0.824, 0.839, 0.897, 0.925, 0.952 },
            { 0.804, 0.834, 0.849, 0.907, 0.935, 0.963 },
            { 0.814, 0.844, 0.859, 0.917, 0.945, 0.974 },
            { 0.823, 0.854, 0.869, 0.927, 0.955, 0.985 },
            { 0.833, 0.863, 0.879, 0.937, 0.965, 0.996 },
            { 0.842, 0.873, 0.889, 0.947, 0.975, 1.007 },
            { 0.851, 0.883, 0.899, 0.957, 0.985, 1.018 },
            { 0.86, 0.892, 0.908, 0.967, 0.995, 1.029 },
            { 0.869, 0.902, 0.918, 0.977, 1.005, 1.04 },
            { 0.878, 0.911, 0.928, 0.987, 1.015, 1.051 },
            { 0.888, 0.921, 0.938, 0.997, 1.025, 1.062 },
            { 0.896, 0.93, 0.947, 1.008, 1.037, 1.075 },
            { 0.905, 0.94, 0.957, 1.018, 1.047, 1.085 },
            { 0.914, 0.949, 0.966, 1.029, 1.057, 1.096 },
            { 0.923, 0.958, 0.976, 1.039, 1.069, 1.108 },
            { 0.932, 0.967, 0.985, 1.049, 1.079, 1.118 },
            { 0.941, 0.976, 0.994, 1.059, 1.089, 1.129 },
            { 0.949, 0.986, 1.004, 1.069, 1.099, 1.14 },
            { 0.958, 0.995, 1.013, 1.079, 1.109, 1.15 },
            { 0.966, 1.004, 1.022, 1.089, 1.119, 1.16 },
            { 0.975, 1.013, 1.031, 1.098, 1.131, 1.173 },
            { 0.983, 1.021, 1.04, 1.109, 1.141, 1.184 },
            { 0.992, 1.03, 1.049, 1.119, 1.151, 1.194 },
            { 1, 1.039, 1.058, 1.128, 1.162, 1.205 },
            { 1.009, 1.048, 1.067, 1.138, 1.172, 1.217 },
            { 1.017, 1.056, 1.076, 1.148, 1.181, 1.226 },
            { 1.025, 1.065, 1.085, 1.157, 1.191, 1.236 },
            { 1.033, 1.074, 1.094, 1.166, 1.202, 1.247 },
            { 1.041, 1.082, 1.103, 1.176, 1.211, 1.257 },
            { 1.049, 1.091, 1.111, 1.186, 1.221, 1.268 },
            { 1.057, 1.099, 1.12, 1.195, 1.23, 1.277 },
            { 1.065, 1.107, 1.128, 1.205, 1.241, 1.288 },
            { 1.073, 1.116, 1.137, 1.214, 1.25, 1.297 },
            { 1.081, 1.124, 1.145, 1.223, 1.259, 1.307 },
            { 1.089, 1.132, 1.154, 1.232, 1.268, 1.317 },
            { 1.096, 1.14, 1.162, 1.241, 1.278, 1.327 },
            { 1.104, 1.148, 1.17, 1.25, 1.288, 1.337 },
            { 1.112, 1.156, 1.179, 1.259, 1.297, 1.347 },
            { 1.119, 1.164, 1.187, 1.269, 1.306, 1.357 },
            { 1.127, 1.172, 1.195, 1.277, 1.315, 1.366 },
            { 1.134, 1.18, 1.203, 1.286, 1.325, 1.376 },
            { 1.142, 1.188, 1.211, 1.295, 1.334, 1.386 },
            { 1.149, 1.196, 1.219, 1.303, 1.344, 1.397 }
    };

    // These values pulled from the July 2010 version of the FCIC 25430 document
    private final static double[][] oatsPackFactors = {
            { 0.763, 0.781, 0.794, 0.813, 0.813, 0.813 },
            { 0.778, 0.798, 0.81, 0.83, 0.83, 0.83 },
            { 0.794, 0.814, 0.827, 0.847, 0.847, 0.847 },
            { 0.81, 0.83, 0.843, 0.863, 0.863, 0.863 },
            { 0.825, 0.846, 0.859, 0.88, 0.88, 0.88 },
            { 0.84, 0.861, 0.875, 0.896, 0.896, 0.896 },
            { 0.855, 0.877, 0.891, 0.913, 0.913, 0.913 },
            { 0.87, 0.892, 0.907, 0.929, 0.929, 0.929 },
            { 0.885, 0.908, 0.923, 0.945, 0.945, 0.945 },
            { 0.9, 0.923, 0.938, 0.961, 0.961, 0.961 },
            { 0.914, 0.938, 0.953, 1.108, 1.158, 1.231 },
            { 0.928, 0.952, 0.968, 1.127, 1.179, 1.254 },
            { 0.943, 0.967, 0.983, 1.144, 1.198, 1.274 },
            { 0.956, 0.981, 0.998, 1.162, 1.217, 1.294 },
            { 0.97, 0.996, 1.013, 1.18, 1.235, 1.314 },
            { 0.984, 1.01, 1.027, 1.197, 1.253, 1.333 },
            { 0.998, 1.024, 1.041, 1.214, 1.272, 1.354 },
            { 1.011, 1.038, 1.055, 1.232, 1.289, 1.372 },
            { 1.024, 1.051, 1.069, 1.249, 1.308, 1.393 },
            { 1.037, 1.065, 1.083, 1.266, 1.327, 1.414 },
            { 1.05, 1.078, 1.097, 1.283, 1.345, 1.433 },
            { 1.063, 1.091, 1.11, 1.299, 1.363, 1.452 },
            { 1.075, 1.104, 1.124, 1.316, 1.379, 1.47 },
            { 1.088, 1.117, 1.137, 1.332, 1.397, 1.49 },
            { 1.1, 1.13, 1.15, 1.348, 1.414, 1.507 },
            { 1.112, 1.143, 1.163, 1.365, 1.43, 1.525 },
            { 1.124, 1.155, 1.176, 1.38, 1.447, 1.543 },
            { 1.136, 1.167, 1.188, 1.395, 1.464, 1.561 },
            { 1.148, 1.179, 1.201, 1.412, 1.48, 1.579 },
            { 1.159, 1.191, 1.213, 1.427, 1.496, 1.597 },
            { 1.17, 1.203, 1.225, 1.442, 1.514, 1.617 },
            { 1.181, 1.215, 1.237, 1.457, 1.53, 1.634 },
            { 1.193, 1.226, 1.249, 1.472, 1.545, 1.65 },
            { 1.203, 1.238, 1.26, 1.487, 1.561, 1.668 },
            { 1.214, 1.249, 1.272, 1.501, 1.577, 1.685 },
            { 1.225, 1.26, 1.283, 1.515, 1.592, 1.701 },
            { 1.235, 1.271, 1.294, 1.53, 1.606, 1.717 },
            { 1.245, 1.281, 1.305, 1.544, 1.622, 1.735 },
            { 1.255, 1.292, 1.316, 1.558, 1.637, 1.751 },
            { 1.265, 1.302, 1.327, 1.572, 1.653, 1.768 },
            { 1.275, 1.313, 1.338, 1.585, 1.667, 1.784 },
            { 1.285, 1.323, 1.348, 1.599, 1.682, 1.801 },
            { 1.294, 1.333, 1.358, 1.612, 1.696, 1.815 },
            { 1.303, 1.342, 1.368, 1.626, 1.711, 1.832 },
            { 1.313, 1.352, 1.378, 1.639, 1.724, 1.847 },
            { 1.321, 1.361, 1.388, 1.651, 1.738, 1.862 },
            { 1.33, 1.371, 1.398, 1.664, 1.752, 1.877 },
            { 1.339, 1.38, 1.407, 1.677, 1.764, 1.891 },
            { 1.348, 1.389, 1.416, 1.689, 1.779, 1.908 },
            { 1.356, 1.398, 1.425, 1.702, 1.793, 1.923 },
            { 1.364, 1.406, 1.434, 1.715, 1.807, 1.938 },
            { 1.372, 1.415, 1.443, 1.728, 1.821, 1.953 },
            { 1.38, 1.423, 1.452, 1.741, 1.835, 1.968 },
            { 1.388, 1.431, 1.46, 1.754, 1.849, 1.983 },
            { 1.395, 1.439, 1.469, 1.767, 1.863, 1.998 },
            { 1.403, 1.447, 1.477, 1.78, 1.877, 2.013 },
            { 1.41, 1.455, 1.485, 1.793, 1.891, 2.028 },
            { 1.417, 1.463, 1.493, 1.806, 1.905, 2.043 },
            { 1.424, 1.47, 1.501, 1.819, 1.919, 2.058 },
            { 1.431, 1.477, 1.508, 1.832, 1.933, 2.073 },
            { 1.438, 1.484, 1.516, 1.845, 1.947, 2.088 }
    };
}
